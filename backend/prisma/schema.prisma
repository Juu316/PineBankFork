generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model OTP {
  id        String   @id @default(uuid())
  email     String
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now())
  type      String   @default("TRANSACTION_PASSWORD_RESET")

  @@index([email])
  @@map("otps")
}
model User {
  id                  String        @id
  email               String        @unique
  username            String?       @unique
  password            String
  transactionPassword String?
  createdAt           DateTime      @default(now())
  accounts            BankAccount[]
  designs             Design[]
  userProfile         UserProfile?
}

model UserProfile {
  id        String @id @default(uuid())
  userId    String @unique
  firstName String
  lastName  String
  address   String
  phone     String
  image     String?
  user      User   @relation(fields: [userId], references: [id], onDelete:Cascade)
}

model BankAccount {
  id               String        @id @default(uuid())
  accountNumber    String        @unique
  type             AccountEnum   @default(BUSINESS)
  balance          Float         @default(0.0)
  userId           String
  createdAt        DateTime      @default(now())
  user             User          @relation(fields: [userId], references: [id], onDelete:Cascade)
  transactionsFrom Transaction[] @relation("FromAccount")
  transactionsTo   Transaction[] @relation("ToAccount")
  quickTransfersTo Design[]      @relation("QuickTransferTo")
}

model Transaction {
  id                      String                @id @default(uuid())
  fromAccountId           String
  toAccountId             String
  amount                  Float
  timestamp               DateTime              @default(now())
  status                  TransactionStatusEnum @default(PENDING)
  reference               String?
  balanceAfterTransaction Float?
  fromAccount             BankAccount           @relation("FromAccount", fields: [fromAccountId], references: [id], onDelete:Cascade)
  toAccount               BankAccount           @relation("ToAccount", fields: [toAccountId], references: [id], onDelete:Cascade)
}

model Design {
  id              String      @id @default(uuid())
  designName      String
  toAccountNumber String
  toAccountId     String
  userId          String
  timestamp       DateTime    @default(now())
  user            User        @relation(fields: [userId], references: [id], onDelete:Cascade)
  toAccount       BankAccount @relation("QuickTransferTo", fields: [toAccountId], references: [id], onDelete:Cascade)
}

enum AccountEnum {
  SAVINGS
  BUSINESS
}

enum TransactionStatusEnum {
  PENDING
  COMPLETED
  FAILED
}
